name: Auto Deploy & Alert Deploy Status & Release Tag

on:
  pull_request:
    types: ["closed"]
  # workflow_dispatch:
  #   inputs:
  #     channel_name:
  #       description: "The name of slack channel you will get messages: "
  #       required: true
  #     docker_image_name:
  #       description: "docker image name that you defined :"
  #       required: true
  #       default: "app"

# job is triggered only when PR is closed and merged to the 'main' branch
jobs:
  prepare_alert_deploy_status:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: prepare for a slack-send environment
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}
          CHANNEL_NAME: ${{secrets.CHANNEL_NAME}}
        with:
          payload: |
            {
              "channel":  "#${{env.CHANNEL_NAME}}", "username": "Alert Manager", "text": "*===UPDATE ALARM===*", "icon_emoji": ":seal:"
            }
      - env:
          CHANNEL_NAME: ${{secrets.CHANNEL_NAME}}
        run: |
          echo "channel name! : #${{env.CHANNEL_NAME}}"

  docker-ssh-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub # Docker Hub에 이미지를 업로드하기 위해서 로그인합니다.
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push # Dockerfile의 내용을 이용해 이미지를 빌드합니다.
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{secrets.DOCKERHUB_USERNAME}}/app:latest # 현재 도커허브 유저네임과 이미지명이 고정이지만 추후에 바꿀수 있도록 변경할것입니다.
      - name: executing remote ssh commands using key # SSH 를 통해 리모트 서버로 접속하고 docker-compose 를 이용해 디플로이하는 스탭입니다.
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd ~
            docker-compose down
            docker image rm ${{secrets.DOCKERHUB_USERNAME}}/app:latest
            docker-compose up -d

  alert_deploy_failed:
    if: ${{ failure() }} # 이전의 job이 실패했을 경우 실행됨
    needs: docker-ssh-deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: prepare to get github repo url
        run: |
          sudo apt install jq

      # Parse PR
      - name: get Pull Request Title
        id: pr_info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "pull_request_number=${{ github.event.number }}" >> $GITHUB_OUTPUT
          echo "pull_request_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT

      - name: Failed to send a slack alarm
        shell: bash
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL_NAME: ${{secrets.CHANNEL_NAME}}
          GITHUB_REPO: ${{ toJson(github) }}
        run: |
          GITHUB_REPO_URL_w=$(echo $GITHUB_REPO | jq '.repositoryUrl')
          # "와 git:// 삭제
          GITHUB_REPO_URL=$(echo "${GITHUB_REPO_URL_w:7:-1}")

          chmod +x tools/alertFailure.sh
          tools/alertFailure.sh "$SLACK_WEBHOOK_URL" "${GITHUB_REPO_URL}" "${{ steps.pr_info.outputs.pull_request_title }}" "${{env.SLACK_CHANNEL_NAME}}"

  alert_deploy_success:
    if: ${{ success() }} # 이전의 job이 성공했을 경우 실행됨
    runs-on: ubuntu-latest
    needs: docker-ssh-deploy
    steps:
      - uses: actions/checkout@v3
      - name: prepare to get github repo url
        run: |
          sudo apt install jq

      # Parse PR
      - name: get Pull Request Title
        id: pr_info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "pull_request_number=${{ github.event.number }}" >> $GITHUB_OUTPUT
          echo "pull_request_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT

      - name: Succeed to send a slack alarm
        shell: bash
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL_NAME: ${{secrets.CHANNEL_NAME}}
          GITHUB_REPO: ${{ toJson(github) }}
        run: |
          GITHUB_REPO_URL_w=$(echo $GITHUB_REPO | jq '.repositoryUrl')
          # "와 git:// 삭제
          GITHUB_REPO_URL=$(echo "${GITHUB_REPO_URL_w:7:-1}")

          chmod +x tools/alertSuccess.sh
          tools/alertSuccess.sh "$SLACK_WEBHOOK_URL" "${GITHUB_REPO_URL}" "${{ steps.pr_info.outputs.pull_request_title }}" "${{env.SLACK_CHANNEL_NAME}}"

  ## below code is from .github/releaseAction.yml and modified
  ## name: Release Tag
  ## only runs when alert_deploy_success job is done
  release_tag:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: alert_deploy_success
    if: ${{ success() }}
    steps:
      - uses: actions/checkout@v2
      - name: 버전 정보 추출
        id: extract_version_name
        shell: bash
        run: |
          VAR=$(echo '${{ github.event.pull_request.title }}' | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')

          echo $VAR
          echo "version=${VAR}" >> $GITHUB_OUTPUT

      - name: Release 생성
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.extract_version_name.outputs.version }}"
          release_name: "v${{ steps.extract_version_name.outputs.version }}"
# branding: # 이후 마켓에 등록할 때 로고나 색깔을 지정
#   icon: 'anchor'
#   color: 'red'
